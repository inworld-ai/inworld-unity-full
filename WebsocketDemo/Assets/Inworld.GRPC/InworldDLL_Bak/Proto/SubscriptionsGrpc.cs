// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ai/inworld/studio/v1alpha/subscriptions.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ai.Inworld.Studio.V1Alpha {
  /// <summary>
  /// Service providing access to Subscription API
  /// </summary>
  public static partial class Subscriptions
  {
    static readonly string __ServiceName = "ai.inworld.studio.v1alpha.Subscriptions";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest> __Marshaller_ai_inworld_studio_v1alpha_ListSubscriptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse> __Marshaller_ai_inworld_studio_v1alpha_ListSubscriptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest> __Marshaller_ai_inworld_studio_v1alpha_PurchaseSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest> __Marshaller_ai_inworld_studio_v1alpha_CancelSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest> __Marshaller_ai_inworld_studio_v1alpha_ListUsagePeriodsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse> __Marshaller_ai_inworld_studio_v1alpha_ListUsagePeriodsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest> __Marshaller_ai_inworld_studio_v1alpha_GetCurrentAccountQuotaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota> __Marshaller_ai_inworld_studio_v1alpha_CurrentAccountQuota = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest, global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse> __Method_ListSubscriptions = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest, global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSubscriptions",
        __Marshaller_ai_inworld_studio_v1alpha_ListSubscriptionsRequest,
        __Marshaller_ai_inworld_studio_v1alpha_ListSubscriptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_PurchaseSubscription = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PurchaseSubscription",
        __Marshaller_ai_inworld_studio_v1alpha_PurchaseSubscriptionRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CancelSubscription = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelSubscription",
        __Marshaller_ai_inworld_studio_v1alpha_CancelSubscriptionRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest, global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse> __Method_ListUsagePeriods = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest, global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUsagePeriods",
        __Marshaller_ai_inworld_studio_v1alpha_ListUsagePeriodsRequest,
        __Marshaller_ai_inworld_studio_v1alpha_ListUsagePeriodsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest, global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota> __Method_GetCurrentAccountQuota = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest, global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCurrentAccountQuota",
        __Marshaller_ai_inworld_studio_v1alpha_GetCurrentAccountQuotaRequest,
        __Marshaller_ai_inworld_studio_v1alpha_CurrentAccountQuota);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ai.Inworld.Studio.V1Alpha.SubscriptionsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Subscriptions</summary>
    [grpc::BindServiceMethod(typeof(Subscriptions), "BindService")]
    public abstract partial class SubscriptionsBase
    {
      /// <summary>
      /// List subscription connected to billing account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse> ListSubscriptions(global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Purchase subscription for user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> PurchaseSubscription(global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancel subscription for user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CancelSubscription(global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get usage periods for a billing account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse> ListUsagePeriods(global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get usage on the current active subscription and remaining credits
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota> GetCurrentAccountQuota(global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Subscriptions</summary>
    public partial class SubscriptionsClient : grpc::ClientBase<SubscriptionsClient>
    {
      /// <summary>Creates a new client for Subscriptions</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SubscriptionsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Subscriptions that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SubscriptionsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SubscriptionsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SubscriptionsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List subscription connected to billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse ListSubscriptions(global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List subscription connected to billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse ListSubscriptions(global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// List subscription connected to billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List subscription connected to billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// Purchase subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PurchaseSubscription(global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PurchaseSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Purchase subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PurchaseSubscription(global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PurchaseSubscription, null, options, request);
      }
      /// <summary>
      /// Purchase subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PurchaseSubscriptionAsync(global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PurchaseSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Purchase subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PurchaseSubscriptionAsync(global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PurchaseSubscription, null, options, request);
      }
      /// <summary>
      /// Cancel subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelSubscription(global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelSubscription(global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelSubscription, null, options, request);
      }
      /// <summary>
      /// Cancel subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelSubscriptionAsync(global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel subscription for user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelSubscriptionAsync(global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelSubscription, null, options, request);
      }
      /// <summary>
      /// Get usage periods for a billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse ListUsagePeriods(global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsagePeriods(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get usage periods for a billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse ListUsagePeriods(global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUsagePeriods, null, options, request);
      }
      /// <summary>
      /// Get usage periods for a billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse> ListUsagePeriodsAsync(global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUsagePeriodsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get usage periods for a billing account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse> ListUsagePeriodsAsync(global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUsagePeriods, null, options, request);
      }
      /// <summary>
      /// Get usage on the current active subscription and remaining credits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota GetCurrentAccountQuota(global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentAccountQuota(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get usage on the current active subscription and remaining credits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota GetCurrentAccountQuota(global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCurrentAccountQuota, null, options, request);
      }
      /// <summary>
      /// Get usage on the current active subscription and remaining credits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota> GetCurrentAccountQuotaAsync(global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentAccountQuotaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get usage on the current active subscription and remaining credits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota> GetCurrentAccountQuotaAsync(global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCurrentAccountQuota, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SubscriptionsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SubscriptionsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SubscriptionsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListSubscriptions, serviceImpl.ListSubscriptions)
          .AddMethod(__Method_PurchaseSubscription, serviceImpl.PurchaseSubscription)
          .AddMethod(__Method_CancelSubscription, serviceImpl.CancelSubscription)
          .AddMethod(__Method_ListUsagePeriods, serviceImpl.ListUsagePeriods)
          .AddMethod(__Method_GetCurrentAccountQuota, serviceImpl.GetCurrentAccountQuota).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SubscriptionsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListSubscriptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsRequest, global::Ai.Inworld.Studio.V1Alpha.ListSubscriptionsResponse>(serviceImpl.ListSubscriptions));
      serviceBinder.AddMethod(__Method_PurchaseSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.PurchaseSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.PurchaseSubscription));
      serviceBinder.AddMethod(__Method_CancelSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.CancelSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CancelSubscription));
      serviceBinder.AddMethod(__Method_ListUsagePeriods, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsRequest, global::Ai.Inworld.Studio.V1Alpha.ListUsagePeriodsResponse>(serviceImpl.ListUsagePeriods));
      serviceBinder.AddMethod(__Method_GetCurrentAccountQuota, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.GetCurrentAccountQuotaRequest, global::Ai.Inworld.Studio.V1Alpha.CurrentAccountQuota>(serviceImpl.GetCurrentAccountQuota));
    }

  }
}
#endregion
