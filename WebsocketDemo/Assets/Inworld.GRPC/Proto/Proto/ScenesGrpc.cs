// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ai/inworld/studio/v1alpha/scenes.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ai.Inworld.Studio.V1Alpha {
  /// <summary>
  /// Scenes management service
  /// </summary>
  public static partial class Scenes
  {
    static readonly string __ServiceName = "ai.inworld.studio.v1alpha.Scenes";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest> __Marshaller_ai_inworld_studio_v1alpha_DeploySceneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest> __Marshaller_ai_inworld_studio_v1alpha_GetSceneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.Scene> __Marshaller_ai_inworld_studio_v1alpha_Scene = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.Scene.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest> __Marshaller_ai_inworld_studio_v1alpha_ListScenesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse> __Marshaller_ai_inworld_studio_v1alpha_ListScenesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest> __Marshaller_ai_inworld_studio_v1alpha_UpdateSceneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest> __Marshaller_ai_inworld_studio_v1alpha_CreateSceneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest> __Marshaller_ai_inworld_studio_v1alpha_DeleteSceneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeployScene = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeployScene",
        __Marshaller_ai_inworld_studio_v1alpha_DeploySceneRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene> __Method_GetScene = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScene",
        __Marshaller_ai_inworld_studio_v1alpha_GetSceneRequest,
        __Marshaller_ai_inworld_studio_v1alpha_Scene);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest, global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse> __Method_ListScenes = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest, global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListScenes",
        __Marshaller_ai_inworld_studio_v1alpha_ListScenesRequest,
        __Marshaller_ai_inworld_studio_v1alpha_ListScenesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene> __Method_UpdateScene = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateScene",
        __Marshaller_ai_inworld_studio_v1alpha_UpdateSceneRequest,
        __Marshaller_ai_inworld_studio_v1alpha_Scene);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene> __Method_CreateScene = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateScene",
        __Marshaller_ai_inworld_studio_v1alpha_CreateSceneRequest,
        __Marshaller_ai_inworld_studio_v1alpha_Scene);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteScene = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteScene",
        __Marshaller_ai_inworld_studio_v1alpha_DeleteSceneRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ai.Inworld.Studio.V1Alpha.ScenesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Scenes</summary>
    [grpc::BindServiceMethod(typeof(Scenes), "BindService")]
    public abstract partial class ScenesBase
    {
      /// <summary>
      /// RPC to deploy the scene: store scene character composition with
      /// character overloads and related information (triggers etc) in an
      /// storage(GSC).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeployScene(global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to get one scene
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.Scene> GetScene(global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to get list of scenes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse> ListScenes(global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to update a scene
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.Scene> UpdateScene(global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to create a scene
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.Scene> CreateScene(global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to delete a scene
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteScene(global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Scenes</summary>
    public partial class ScenesClient : grpc::ClientBase<ScenesClient>
    {
      /// <summary>Creates a new client for Scenes</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ScenesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Scenes that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ScenesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ScenesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ScenesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// RPC to deploy the scene: store scene character composition with
      /// character overloads and related information (triggers etc) in an
      /// storage(GSC).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeployScene(global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to deploy the scene: store scene character composition with
      /// character overloads and related information (triggers etc) in an
      /// storage(GSC).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeployScene(global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeployScene, null, options, request);
      }
      /// <summary>
      /// RPC to deploy the scene: store scene character composition with
      /// character overloads and related information (triggers etc) in an
      /// storage(GSC).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeploySceneAsync(global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeploySceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to deploy the scene: store scene character composition with
      /// character overloads and related information (triggers etc) in an
      /// storage(GSC).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeploySceneAsync(global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeployScene, null, options, request);
      }
      /// <summary>
      /// RPC to get one scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Scene GetScene(global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get one scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Scene GetScene(global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScene, null, options, request);
      }
      /// <summary>
      /// RPC to get one scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Scene> GetSceneAsync(global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get one scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Scene> GetSceneAsync(global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScene, null, options, request);
      }
      /// <summary>
      /// RPC to get list of scenes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse ListScenes(global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScenes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get list of scenes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse ListScenes(global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListScenes, null, options, request);
      }
      /// <summary>
      /// RPC to get list of scenes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse> ListScenesAsync(global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScenesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get list of scenes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse> ListScenesAsync(global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListScenes, null, options, request);
      }
      /// <summary>
      /// RPC to update a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Scene UpdateScene(global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to update a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Scene UpdateScene(global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateScene, null, options, request);
      }
      /// <summary>
      /// RPC to update a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Scene> UpdateSceneAsync(global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to update a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Scene> UpdateSceneAsync(global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateScene, null, options, request);
      }
      /// <summary>
      /// RPC to create a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Scene CreateScene(global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to create a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Scene CreateScene(global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateScene, null, options, request);
      }
      /// <summary>
      /// RPC to create a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Scene> CreateSceneAsync(global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to create a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Scene> CreateSceneAsync(global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateScene, null, options, request);
      }
      /// <summary>
      /// RPC to delete a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteScene(global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to delete a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteScene(global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteScene, null, options, request);
      }
      /// <summary>
      /// RPC to delete a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSceneAsync(global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to delete a scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSceneAsync(global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteScene, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ScenesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ScenesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ScenesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeployScene, serviceImpl.DeployScene)
          .AddMethod(__Method_GetScene, serviceImpl.GetScene)
          .AddMethod(__Method_ListScenes, serviceImpl.ListScenes)
          .AddMethod(__Method_UpdateScene, serviceImpl.UpdateScene)
          .AddMethod(__Method_CreateScene, serviceImpl.CreateScene)
          .AddMethod(__Method_DeleteScene, serviceImpl.DeleteScene).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ScenesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DeployScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.DeploySceneRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeployScene));
      serviceBinder.AddMethod(__Method_GetScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.GetSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene>(serviceImpl.GetScene));
      serviceBinder.AddMethod(__Method_ListScenes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.ListScenesRequest, global::Ai.Inworld.Studio.V1Alpha.ListScenesResponse>(serviceImpl.ListScenes));
      serviceBinder.AddMethod(__Method_UpdateScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.UpdateSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene>(serviceImpl.UpdateScene));
      serviceBinder.AddMethod(__Method_CreateScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.CreateSceneRequest, global::Ai.Inworld.Studio.V1Alpha.Scene>(serviceImpl.CreateScene));
      serviceBinder.AddMethod(__Method_DeleteScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.DeleteSceneRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteScene));
    }

  }
}
#endregion
