// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ai/inworld/studio/v1alpha/workspaces.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ai.Inworld.Studio.V1Alpha {
  /// <summary>
  /// Service to manage workspaces.
  /// Workspaces are the root of the resource hierarchy for Inworld users.
  /// </summary>
  public static partial class Workspaces
  {
    static readonly string __ServiceName = "ai.inworld.studio.v1alpha.Workspaces";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest> __Marshaller_ai_inworld_studio_v1alpha_GetWorkspaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.Workspace> __Marshaller_ai_inworld_studio_v1alpha_Workspace = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.Workspace.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest> __Marshaller_ai_inworld_studio_v1alpha_ListWorkspacesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse> __Marshaller_ai_inworld_studio_v1alpha_ListWorkspacesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest> __Marshaller_ai_inworld_studio_v1alpha_UpdateWorkspaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest> __Marshaller_ai_inworld_studio_v1alpha_CreateWorkspaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest> __Marshaller_ai_inworld_studio_v1alpha_DeleteWorkspaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest> __Marshaller_ai_inworld_studio_v1alpha_ShareWorkspaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest> __Marshaller_ai_inworld_studio_v1alpha_GenerateResourceNameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse> __Marshaller_ai_inworld_studio_v1alpha_GenerateResourceNameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest> __Marshaller_ai_inworld_studio_v1alpha_GetWorkspaceShareInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo> __Marshaller_ai_inworld_studio_v1alpha_WorkspaceShareInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest> __Marshaller_ai_inworld_studio_v1alpha_GetWorkspaceLimitInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo> __Marshaller_ai_inworld_studio_v1alpha_WorkspaceLimitInfo = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest> __Marshaller_ai_inworld_studio_v1alpha_ImpressionEventRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace> __Method_GetWorkspace = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkspace",
        __Marshaller_ai_inworld_studio_v1alpha_GetWorkspaceRequest,
        __Marshaller_ai_inworld_studio_v1alpha_Workspace);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest, global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse> __Method_ListWorkspaces = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest, global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkspaces",
        __Marshaller_ai_inworld_studio_v1alpha_ListWorkspacesRequest,
        __Marshaller_ai_inworld_studio_v1alpha_ListWorkspacesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace> __Method_UpdateWorkspace = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateWorkspace",
        __Marshaller_ai_inworld_studio_v1alpha_UpdateWorkspaceRequest,
        __Marshaller_ai_inworld_studio_v1alpha_Workspace);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace> __Method_CreateWorkspace = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWorkspace",
        __Marshaller_ai_inworld_studio_v1alpha_CreateWorkspaceRequest,
        __Marshaller_ai_inworld_studio_v1alpha_Workspace);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteWorkspace = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWorkspace",
        __Marshaller_ai_inworld_studio_v1alpha_DeleteWorkspaceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ShareWorkspace = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ShareWorkspace",
        __Marshaller_ai_inworld_studio_v1alpha_ShareWorkspaceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest, global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse> __Method_generateResourceName = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest, global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "generateResourceName",
        __Marshaller_ai_inworld_studio_v1alpha_GenerateResourceNameRequest,
        __Marshaller_ai_inworld_studio_v1alpha_GenerateResourceNameResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest, global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo> __Method_GetWorkspaceShareInfo = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest, global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkspaceShareInfo",
        __Marshaller_ai_inworld_studio_v1alpha_GetWorkspaceShareInfoRequest,
        __Marshaller_ai_inworld_studio_v1alpha_WorkspaceShareInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest, global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo> __Method_GetWorkspaceLimitInfo = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest, global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkspaceLimitInfo",
        __Marshaller_ai_inworld_studio_v1alpha_GetWorkspaceLimitInfoRequest,
        __Marshaller_ai_inworld_studio_v1alpha_WorkspaceLimitInfo);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SendImpressionEvent = new grpc::Method<global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendImpressionEvent",
        __Marshaller_ai_inworld_studio_v1alpha_ImpressionEventRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ai.Inworld.Studio.V1Alpha.WorkspacesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Workspaces</summary>
    [grpc::BindServiceMethod(typeof(Workspaces), "BindService")]
    public abstract partial class WorkspacesBase
    {
      /// <summary>
      /// Returns one workspace
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.Workspace> GetWorkspace(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns list of the workspaces.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse> ListWorkspaces(global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a workspace.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.Workspace> UpdateWorkspace(global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a workspace.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.Workspace> CreateWorkspace(global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a workspace.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteWorkspace(global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to share the workspace
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ShareWorkspace(global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to generate unique resource name from display name for the given
      /// workspace resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse> generateResourceName(global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to get actual sharing info on the workspace.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo> GetWorkspaceShareInfo(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to get actual limit info on the workspace.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo> GetWorkspaceLimitInfo(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to publish impression event for workspace
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SendImpressionEvent(global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Workspaces</summary>
    public partial class WorkspacesClient : grpc::ClientBase<WorkspacesClient>
    {
      /// <summary>Creates a new client for Workspaces</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkspacesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Workspaces that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkspacesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkspacesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkspacesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns one workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Workspace GetWorkspace(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns one workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Workspace GetWorkspace(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkspace, null, options, request);
      }
      /// <summary>
      /// Returns one workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Workspace> GetWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns one workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Workspace> GetWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkspace, null, options, request);
      }
      /// <summary>
      /// Returns list of the workspaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse ListWorkspaces(global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkspaces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns list of the workspaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse ListWorkspaces(global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkspaces, null, options, request);
      }
      /// <summary>
      /// Returns list of the workspaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse> ListWorkspacesAsync(global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkspacesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns list of the workspaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse> ListWorkspacesAsync(global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkspaces, null, options, request);
      }
      /// <summary>
      /// Updates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Workspace UpdateWorkspace(global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkspace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Workspace UpdateWorkspace(global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorkspace, null, options, request);
      }
      /// <summary>
      /// Updates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Workspace> UpdateWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateWorkspaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Workspace> UpdateWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorkspace, null, options, request);
      }
      /// <summary>
      /// Creates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Workspace CreateWorkspace(global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkspace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.Workspace CreateWorkspace(global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWorkspace, null, options, request);
      }
      /// <summary>
      /// Creates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Workspace> CreateWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorkspaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.Workspace> CreateWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWorkspace, null, options, request);
      }
      /// <summary>
      /// Deletes a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteWorkspace(global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkspace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteWorkspace(global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWorkspace, null, options, request);
      }
      /// <summary>
      /// Deletes a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWorkspaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWorkspace, null, options, request);
      }
      /// <summary>
      /// RPC to share the workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ShareWorkspace(global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShareWorkspace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to share the workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ShareWorkspace(global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShareWorkspace, null, options, request);
      }
      /// <summary>
      /// RPC to share the workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ShareWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShareWorkspaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to share the workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ShareWorkspaceAsync(global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShareWorkspace, null, options, request);
      }
      /// <summary>
      /// RPC to generate unique resource name from display name for the given
      /// workspace resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse generateResourceName(global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return generateResourceName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to generate unique resource name from display name for the given
      /// workspace resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse generateResourceName(global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_generateResourceName, null, options, request);
      }
      /// <summary>
      /// RPC to generate unique resource name from display name for the given
      /// workspace resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse> generateResourceNameAsync(global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return generateResourceNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to generate unique resource name from display name for the given
      /// workspace resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse> generateResourceNameAsync(global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_generateResourceName, null, options, request);
      }
      /// <summary>
      /// RPC to get actual sharing info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo GetWorkspaceShareInfo(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceShareInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get actual sharing info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo GetWorkspaceShareInfo(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkspaceShareInfo, null, options, request);
      }
      /// <summary>
      /// RPC to get actual sharing info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo> GetWorkspaceShareInfoAsync(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceShareInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get actual sharing info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo> GetWorkspaceShareInfoAsync(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkspaceShareInfo, null, options, request);
      }
      /// <summary>
      /// RPC to get actual limit info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo GetWorkspaceLimitInfo(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceLimitInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get actual limit info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo GetWorkspaceLimitInfo(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkspaceLimitInfo, null, options, request);
      }
      /// <summary>
      /// RPC to get actual limit info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo> GetWorkspaceLimitInfoAsync(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceLimitInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get actual limit info on the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo> GetWorkspaceLimitInfoAsync(global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkspaceLimitInfo, null, options, request);
      }
      /// <summary>
      /// RPC to publish impression event for workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendImpressionEvent(global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendImpressionEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to publish impression event for workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendImpressionEvent(global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendImpressionEvent, null, options, request);
      }
      /// <summary>
      /// RPC to publish impression event for workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendImpressionEventAsync(global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendImpressionEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to publish impression event for workspace
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendImpressionEventAsync(global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendImpressionEvent, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WorkspacesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorkspacesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WorkspacesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetWorkspace, serviceImpl.GetWorkspace)
          .AddMethod(__Method_ListWorkspaces, serviceImpl.ListWorkspaces)
          .AddMethod(__Method_UpdateWorkspace, serviceImpl.UpdateWorkspace)
          .AddMethod(__Method_CreateWorkspace, serviceImpl.CreateWorkspace)
          .AddMethod(__Method_DeleteWorkspace, serviceImpl.DeleteWorkspace)
          .AddMethod(__Method_ShareWorkspace, serviceImpl.ShareWorkspace)
          .AddMethod(__Method_generateResourceName, serviceImpl.generateResourceName)
          .AddMethod(__Method_GetWorkspaceShareInfo, serviceImpl.GetWorkspaceShareInfo)
          .AddMethod(__Method_GetWorkspaceLimitInfo, serviceImpl.GetWorkspaceLimitInfo)
          .AddMethod(__Method_SendImpressionEvent, serviceImpl.SendImpressionEvent).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WorkspacesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetWorkspace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace>(serviceImpl.GetWorkspace));
      serviceBinder.AddMethod(__Method_ListWorkspaces, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesRequest, global::Ai.Inworld.Studio.V1Alpha.ListWorkspacesResponse>(serviceImpl.ListWorkspaces));
      serviceBinder.AddMethod(__Method_UpdateWorkspace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.UpdateWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace>(serviceImpl.UpdateWorkspace));
      serviceBinder.AddMethod(__Method_CreateWorkspace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.CreateWorkspaceRequest, global::Ai.Inworld.Studio.V1Alpha.Workspace>(serviceImpl.CreateWorkspace));
      serviceBinder.AddMethod(__Method_DeleteWorkspace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.DeleteWorkspaceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteWorkspace));
      serviceBinder.AddMethod(__Method_ShareWorkspace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.ShareWorkspaceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ShareWorkspace));
      serviceBinder.AddMethod(__Method_generateResourceName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameRequest, global::Ai.Inworld.Studio.V1Alpha.GenerateResourceNameResponse>(serviceImpl.generateResourceName));
      serviceBinder.AddMethod(__Method_GetWorkspaceShareInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceShareInfoRequest, global::Ai.Inworld.Studio.V1Alpha.WorkspaceShareInfo>(serviceImpl.GetWorkspaceShareInfo));
      serviceBinder.AddMethod(__Method_GetWorkspaceLimitInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.GetWorkspaceLimitInfoRequest, global::Ai.Inworld.Studio.V1Alpha.WorkspaceLimitInfo>(serviceImpl.GetWorkspaceLimitInfo));
      serviceBinder.AddMethod(__Method_SendImpressionEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ai.Inworld.Studio.V1Alpha.ImpressionEventRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SendImpressionEvent));
    }

  }
}
#endregion
