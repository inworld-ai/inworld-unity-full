// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: world-engine.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Inworld.Grpc {
  /// <summary>
  /// Service that exposes bidirectional interaction session RPC. Effective runtime
  /// of the inworld.ai.
  /// </summary>
  public static partial class WorldEngine
  {
    static readonly string __ServiceName = "ai.inworld.engine.WorldEngine";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.InworldPacket> __Marshaller_ai_inworld_packets_InworldPacket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.InworldPacket.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.CreateWorldRequest> __Marshaller_ai_inworld_engine_CreateWorldRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.CreateWorldRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.CreateWorldResponse> __Marshaller_ai_inworld_engine_CreateWorldResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.CreateWorldResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.LoadSceneRequest> __Marshaller_ai_inworld_engine_LoadSceneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.LoadSceneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.LoadSceneResponse> __Marshaller_ai_inworld_engine_LoadSceneResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.LoadSceneResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.LogErrorRequest> __Marshaller_ai_inworld_engine_LogErrorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.LogErrorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.VoicePreviewRequest> __Marshaller_ai_inworld_engine_VoicePreviewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.VoicePreviewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.VoicePreviewResponse> __Marshaller_ai_inworld_engine_VoicePreviewResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.VoicePreviewResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.ListBaseVoicesRequest> __Marshaller_ai_inworld_engine_ListBaseVoicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.ListBaseVoicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.ListBaseVoicesResponce> __Marshaller_ai_inworld_engine_ListBaseVoicesResponce = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.ListBaseVoicesResponce.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.GenerateTokenRequest> __Marshaller_ai_inworld_engine_GenerateTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.GenerateTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Inworld.Grpc.AccessToken> __Marshaller_ai_inworld_engine_AccessToken = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Inworld.Grpc.AccessToken.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inworld.Grpc.InworldPacket, global::Inworld.Grpc.InworldPacket> __Method_Session = new grpc::Method<global::Inworld.Grpc.InworldPacket, global::Inworld.Grpc.InworldPacket>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Session",
        __Marshaller_ai_inworld_packets_InworldPacket,
        __Marshaller_ai_inworld_packets_InworldPacket);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inworld.Grpc.CreateWorldRequest, global::Inworld.Grpc.CreateWorldResponse> __Method_CreateWorld = new grpc::Method<global::Inworld.Grpc.CreateWorldRequest, global::Inworld.Grpc.CreateWorldResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWorld",
        __Marshaller_ai_inworld_engine_CreateWorldRequest,
        __Marshaller_ai_inworld_engine_CreateWorldResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inworld.Grpc.LoadSceneRequest, global::Inworld.Grpc.LoadSceneResponse> __Method_LoadScene = new grpc::Method<global::Inworld.Grpc.LoadSceneRequest, global::Inworld.Grpc.LoadSceneResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LoadScene",
        __Marshaller_ai_inworld_engine_LoadSceneRequest,
        __Marshaller_ai_inworld_engine_LoadSceneResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inworld.Grpc.LogErrorRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_LogError = new grpc::Method<global::Inworld.Grpc.LogErrorRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogError",
        __Marshaller_ai_inworld_engine_LogErrorRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inworld.Grpc.VoicePreviewRequest, global::Inworld.Grpc.VoicePreviewResponse> __Method_VoicePreview = new grpc::Method<global::Inworld.Grpc.VoicePreviewRequest, global::Inworld.Grpc.VoicePreviewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VoicePreview",
        __Marshaller_ai_inworld_engine_VoicePreviewRequest,
        __Marshaller_ai_inworld_engine_VoicePreviewResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inworld.Grpc.ListBaseVoicesRequest, global::Inworld.Grpc.ListBaseVoicesResponce> __Method_ListBaseVoices = new grpc::Method<global::Inworld.Grpc.ListBaseVoicesRequest, global::Inworld.Grpc.ListBaseVoicesResponce>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBaseVoices",
        __Marshaller_ai_inworld_engine_ListBaseVoicesRequest,
        __Marshaller_ai_inworld_engine_ListBaseVoicesResponce);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Inworld.Grpc.GenerateTokenRequest, global::Inworld.Grpc.AccessToken> __Method_GenerateToken = new grpc::Method<global::Inworld.Grpc.GenerateTokenRequest, global::Inworld.Grpc.AccessToken>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateToken",
        __Marshaller_ai_inworld_engine_GenerateTokenRequest,
        __Marshaller_ai_inworld_engine_AccessToken);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Inworld.Grpc.WorldEngineReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WorldEngine</summary>
    [grpc::BindServiceMethod(typeof(WorldEngine), "BindService")]
    public abstract partial class WorldEngineBase
    {
      /// <summary>
      /// Bidirectional events based Session.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Session(grpc::IAsyncStreamReader<global::Inworld.Grpc.InworldPacket> requestStream, grpc::IServerStreamWriter<global::Inworld.Grpc.InworldPacket> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to create world for the interaction session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Inworld.Grpc.CreateWorldResponse> CreateWorld(global::Inworld.Grpc.CreateWorldRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to load world for the interaction session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Inworld.Grpc.LoadSceneResponse> LoadScene(global::Inworld.Grpc.LoadSceneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to log errors for the interaction session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> LogError(global::Inworld.Grpc.LogErrorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to get voice preview
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Inworld.Grpc.VoicePreviewResponse> VoicePreview(global::Inworld.Grpc.VoicePreviewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RPC to load list of base voices.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Inworld.Grpc.ListBaseVoicesResponce> ListBaseVoices(global::Inworld.Grpc.ListBaseVoicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates a JWT to access the world engine API with a given API key
      /// A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Inworld.Grpc.AccessToken> GenerateToken(global::Inworld.Grpc.GenerateTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WorldEngine</summary>
    public partial class WorldEngineClient : grpc::ClientBase<WorldEngineClient>
    {
      /// <summary>Creates a new client for WorldEngine</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorldEngineClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WorldEngine that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorldEngineClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorldEngineClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorldEngineClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Bidirectional events based Session.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Inworld.Grpc.InworldPacket, global::Inworld.Grpc.InworldPacket> Session(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Session(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bidirectional events based Session.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Inworld.Grpc.InworldPacket, global::Inworld.Grpc.InworldPacket> Session(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Session, null, options);
      }
      /// <summary>
      /// RPC to create world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.CreateWorldResponse CreateWorld(global::Inworld.Grpc.CreateWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorld(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to create world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.CreateWorldResponse CreateWorld(global::Inworld.Grpc.CreateWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWorld, null, options, request);
      }
      /// <summary>
      /// RPC to create world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.CreateWorldResponse> CreateWorldAsync(global::Inworld.Grpc.CreateWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWorldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to create world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.CreateWorldResponse> CreateWorldAsync(global::Inworld.Grpc.CreateWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWorld, null, options, request);
      }
      /// <summary>
      /// RPC to load world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.LoadSceneResponse LoadScene(global::Inworld.Grpc.LoadSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to load world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.LoadSceneResponse LoadScene(global::Inworld.Grpc.LoadSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadScene, null, options, request);
      }
      /// <summary>
      /// RPC to load world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.LoadSceneResponse> LoadSceneAsync(global::Inworld.Grpc.LoadSceneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LoadSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to load world for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.LoadSceneResponse> LoadSceneAsync(global::Inworld.Grpc.LoadSceneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadScene, null, options, request);
      }
      /// <summary>
      /// RPC to log errors for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty LogError(global::Inworld.Grpc.LogErrorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogError(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to log errors for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty LogError(global::Inworld.Grpc.LogErrorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogError, null, options, request);
      }
      /// <summary>
      /// RPC to log errors for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LogErrorAsync(global::Inworld.Grpc.LogErrorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogErrorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to log errors for the interaction session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LogErrorAsync(global::Inworld.Grpc.LogErrorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogError, null, options, request);
      }
      /// <summary>
      /// RPC to get voice preview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.VoicePreviewResponse VoicePreview(global::Inworld.Grpc.VoicePreviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoicePreview(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get voice preview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.VoicePreviewResponse VoicePreview(global::Inworld.Grpc.VoicePreviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VoicePreview, null, options, request);
      }
      /// <summary>
      /// RPC to get voice preview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.VoicePreviewResponse> VoicePreviewAsync(global::Inworld.Grpc.VoicePreviewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoicePreviewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to get voice preview
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.VoicePreviewResponse> VoicePreviewAsync(global::Inworld.Grpc.VoicePreviewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VoicePreview, null, options, request);
      }
      /// <summary>
      /// RPC to load list of base voices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.ListBaseVoicesResponce ListBaseVoices(global::Inworld.Grpc.ListBaseVoicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBaseVoices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to load list of base voices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.ListBaseVoicesResponce ListBaseVoices(global::Inworld.Grpc.ListBaseVoicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBaseVoices, null, options, request);
      }
      /// <summary>
      /// RPC to load list of base voices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.ListBaseVoicesResponce> ListBaseVoicesAsync(global::Inworld.Grpc.ListBaseVoicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBaseVoicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RPC to load list of base voices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.ListBaseVoicesResponce> ListBaseVoicesAsync(global::Inworld.Grpc.ListBaseVoicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBaseVoices, null, options, request);
      }
      /// <summary>
      /// Generates a JWT to access the world engine API with a given API key
      /// A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.AccessToken GenerateToken(global::Inworld.Grpc.GenerateTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a JWT to access the world engine API with a given API key
      /// A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Inworld.Grpc.AccessToken GenerateToken(global::Inworld.Grpc.GenerateTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateToken, null, options, request);
      }
      /// <summary>
      /// Generates a JWT to access the world engine API with a given API key
      /// A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.AccessToken> GenerateTokenAsync(global::Inworld.Grpc.GenerateTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a JWT to access the world engine API with a given API key
      /// A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Inworld.Grpc.AccessToken> GenerateTokenAsync(global::Inworld.Grpc.GenerateTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateToken, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WorldEngineClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorldEngineClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WorldEngineBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Session, serviceImpl.Session)
          .AddMethod(__Method_CreateWorld, serviceImpl.CreateWorld)
          .AddMethod(__Method_LoadScene, serviceImpl.LoadScene)
          .AddMethod(__Method_LogError, serviceImpl.LogError)
          .AddMethod(__Method_VoicePreview, serviceImpl.VoicePreview)
          .AddMethod(__Method_ListBaseVoices, serviceImpl.ListBaseVoices)
          .AddMethod(__Method_GenerateToken, serviceImpl.GenerateToken).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WorldEngineBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Session, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Inworld.Grpc.InworldPacket, global::Inworld.Grpc.InworldPacket>(serviceImpl.Session));
      serviceBinder.AddMethod(__Method_CreateWorld, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Inworld.Grpc.CreateWorldRequest, global::Inworld.Grpc.CreateWorldResponse>(serviceImpl.CreateWorld));
      serviceBinder.AddMethod(__Method_LoadScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Inworld.Grpc.LoadSceneRequest, global::Inworld.Grpc.LoadSceneResponse>(serviceImpl.LoadScene));
      serviceBinder.AddMethod(__Method_LogError, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Inworld.Grpc.LogErrorRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.LogError));
      serviceBinder.AddMethod(__Method_VoicePreview, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Inworld.Grpc.VoicePreviewRequest, global::Inworld.Grpc.VoicePreviewResponse>(serviceImpl.VoicePreview));
      serviceBinder.AddMethod(__Method_ListBaseVoices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Inworld.Grpc.ListBaseVoicesRequest, global::Inworld.Grpc.ListBaseVoicesResponce>(serviceImpl.ListBaseVoices));
      serviceBinder.AddMethod(__Method_GenerateToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Inworld.Grpc.GenerateTokenRequest, global::Inworld.Grpc.AccessToken>(serviceImpl.GenerateToken));
    }

  }
}
#endregion
