#pragma kernel TextureToTensor

Texture2D<float4> _InputTex;
RWTexture2D<float4> _OutputTex;
RWBuffer<float> _OutputTensor;

uint2 _OutputSize;
float4x4 _TransformMatrix;
float3 _Mean = float3(0.485, 0.456, 0.406);
float3 _StdDev = float3(0.229, 0.224, 0.225);

SamplerState linearClampSampler;


// Get index of NCHW tensor
uint3 IdxNCHW(uint3 c, uint y, uint x)
{
    return c * _OutputSize.x * _OutputSize.y + y * _OutputSize.x + x;
}

[numthreads(8,8,1)]
void TextureToTensor (uint2 id : SV_DispatchThreadID)
{
    if(any(id >= _OutputSize))
    {
        return; 
    }

    float2 uv = (float2)id / float2(_OutputSize - 1.0);
    uv = mul(_TransformMatrix, float4(uv, 0, 1)).xy;

    float4 color = any(uv < 0) || any(uv > 1)
        ? float4(0, 0, 0, 1) // Set to black the outside
        : _InputTex.SampleLevel(linearClampSampler, uv, 0);

    _OutputTex[id] = color;
    
    // TODO: Add shader keywords to enable/disable normalization
    // Normalize
    color.rgb = (color.rgb - _Mean) / _StdDev;

    // Flip Y axis
    uint3 tid = IdxNCHW(uint3(0, 1, 2), _OutputSize.y - id.y - 1, id.x);
    _OutputTensor[tid.x] = color.r;
    _OutputTensor[tid.y] = color.g;
    _OutputTensor[tid.z] = color.b;
}
