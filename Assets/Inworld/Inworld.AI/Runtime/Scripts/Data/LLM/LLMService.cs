/*************************************************************************************************
 * Copyright 2022-2025 Theai, Inc. dba Inworld AI
 *
 * Use of this source code is governed by the Inworld.ai Software Development Kit License Agreement
 * that can be found in the LICENSE.md file or at https://www.inworld.ai/sdk-license
 *************************************************************************************************/

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;


namespace Inworld.LLM.Service
{
	// The function that the model called.
	[Serializable]
	public class FunctionCall
	{
		// The name of the function to call.
		public string name;
		// The arguments to call the function with, as generated by the model in JSON format. Note that the model
		// does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate
		// the arguments in your code before calling your function.
		public string args;
	}

	[Serializable]
	public class ToolCall
	{
		// The ID of the tool call.
		public string id;

		// The function that the model called.
		public FunctionCall function_call;
	}
	
	[Serializable]
	public class ImageUrl
	{				
		// URL of the image.
		public string url;
		// Specifies the detail level of the image: 'low', 'high', 'auto'. Defaults to 'auto'.
		// More info https://platform.openai.com/docs/guides/vision
		[JsonConverter(typeof(StringEnumConverter))]
		public ImageFidelity detail;
	}
	
	[Serializable]
	public class ContentItem
	{
		
	}
	
	[Serializable]
	public class TextContentItem : ContentItem
	{
		// Text content of the message item.
		public string text;
	}
	[Serializable]
	public class ImageContentItem : ContentItem
	{
		// URL of the image content of the message item.
		public ImageUrl image_url;
	}
	
	// A collection of content items.
	[Serializable]
	public class ContentItems 
	{
		// List of content items
		public List<ContentItem> content_items;
	}
	
	// Chat message.
	[Serializable]
	public class Message 
	{
		// The content of the message.
		// Deprecated: Use contents instead.
		[JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
		public string content;
		
		// The role of the messages author.
		[JsonConverter(typeof(StringEnumConverter))]
		public MessageRole role;
		
		// The tool calls generated by the model, such as function calls.
		[JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
		public List<ToolCall> tool_calls;
		// Tool call that this message is responding to.
		[JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
		public string tool_call_id;
		// Provides the model information to differentiate between participants of the same role.
		[JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
		public string name;
		
		
		[JsonIgnore]
		public bool IsPlayer => role == MessageRole.MESSAGE_ROLE_USER;
		
		[JsonIgnore]
		public string Role 
		{
			get
			{
				switch (role)
				{
					case MessageRole.MESSAGE_ROLE_TOOL:
						return string.IsNullOrEmpty(tool_call_id) ? "Tool" : tool_call_id;
					case MessageRole.MESSAGE_ROLE_USER:
						return InworldAI.User.Name;
					case MessageRole.MESSAGE_ROLE_ASSISTANT:
						return "Inworld";
					case MessageRole.MESSAGE_ROLE_SYSTEM:
						return "System";
					default:
						return "";
				}
			}
		}
		[JsonIgnore]
		public virtual string ToMessage => $"{Role}: ";

		[JsonIgnore]
		public virtual string ToHash => InworldAuth.Guid(ToMessage);
	}
	
	// New content of the message, which can be either a plain text or a collection of content items.
	[Serializable]
	public class TextMessage : Message
	{
		public string text_content;
		public TextMessage(string content, MessageRole player = MessageRole.MESSAGE_ROLE_USER)
		{
			role = player;
			text_content = content;
		}
		[JsonIgnore]
		public override string ToMessage => $"{Role}: {text_content}";
	}
	
	[Serializable]
	public class ContentItemsMessage : Message
	{
		public ContentItems content_items;
	}
	public static class MessageFactory
	{
		public static Message CreateRequest(string input)
		{
			return new TextMessage(input.Replace("\n", ""));
		}
		public static Message CreateResponse(string input)
		{
			return new TextMessage(input, MessageRole.MESSAGE_ROLE_ASSISTANT);
		}
	}
	[Serializable]
	public class Choice 
	{
		// The reason the model stopped generating tokens.
		public FinishReason finish_reason;

		// The index of the choice in the list of choices.
		public int index;

		// A chat completion message generated by the model.
		[JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
		public Message message;
		
		// Generated text.
		[JsonProperty(NullValueHandling=NullValueHandling.Ignore)]
		public string text;
	}
	
	// Usage statistics for the completion request.
	[Serializable]
	public class Usage 
	{
		// Number of tokens in the generated completion.
		int completion_tokens;

		// Number of tokens in the prompt.
		int prompt_tokens;
	}
	
	// The prompt to generate text from.
	[Serializable]
	public class Prompt
	{
		// Prompt text.
		public string text;
	}
}
